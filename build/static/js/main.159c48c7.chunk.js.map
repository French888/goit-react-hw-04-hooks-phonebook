{"version":3,"sources":["components/ContactsForm/ContactsForm.js","components/ContactsList/ContactsListItem.js","components/ContactsList/ContactsList.js","components/Container/Container.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContactsForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","uuid","numberInputId","handleChange","event","currentTarget","value","reset","preventDefault","htmlFor","type","pattern","title","required","onChange","id","PropsType","func","isRequired","ContactItem","onDeleteContact","onClick","prototype","PropTypes","string","ContactsList","contacts","map","findContact","Container","children","Filter","filterInputId","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","newContact","find","contact","alert","prevContacts","e","normalizedFilter","toLowerCase","includes","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.159c48c7.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport PropsType from \"prop-types\";\nimport { v4 as uuid } from \"uuid\";\n\nfunction ContactsForm({ onSubmit }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const nameInputId = uuid();\n  const numberInputId = uuid();\n\n  const handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onSubmit(name, number);\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n          id={nameInputId}\n        />\n      </label>\n      <label htmlFor={numberInputId}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n          id={numberInputId}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactsForm.PropsType = {\n  onSubmit: PropsType.func.isRequired,\n};\n\nexport default ContactsForm;\n","import PropTypes from \"prop-types\";\n\nconst ContactItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <li>\n      {name}: {number}\n      <button type=\"submit\" onClick={() => onDeleteContact(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.prototype = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from \"./ContactsListItem.js\";\nimport PropTypes from \"prop-types\";\n\nconst ContactsList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul>\n      {contacts().map(({ id, name, number }) => {\n        return (\n          <ContactItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={onDeleteContact}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.prototype = {\n  findContact: PropTypes.func.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","const Container = ({ children }) => <div>{children}</div>;\n\nexport default Container;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuid } from \"uuid\";\n\nfunction Filter({ value, onChange }) {\n  const filterInputId = uuid();\n  return (\n    <label htmlFor={filterInputId}>\n      Find contacts by name\n      <input\n        id={filterInputId}\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState, useEffect } from \"react\";\nimport ContactsForm from \"./components/ContactsForm\";\nimport ContactsList from \"./components/ContactsList\";\nimport Container from \"./components/Container\";\nimport Filter from \"./components/Filter/Filter\";\nimport { v4 as uuid } from \"uuid\";\n\nfunction App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(\"contacts\")) ?? [];\n  });\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = (name, number) => {\n    const newContact = {\n      id: uuid(),\n      name,\n      number,\n    };\n\n    if (contacts.find((contact) => contact.name === newContact.name)) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n    setContacts((prevContacts) => [newContact, ...prevContacts]);\n  };\n\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const findContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteContact = (contactId) => {\n    setContacts(contacts.filter((contact) => contact.id !== contactId));\n  };\n\n  return (\n    <Container>\n      <h1> PhoneBook </h1>\n      <ContactsForm onSubmit={addContact} contacts={contacts} />\n\n      <div>\n        <h2> Contacts </h2>\n        <Filter value={filter} onChange={changeFilter} />\n        <ContactsList contacts={findContacts} onDeleteContact={deleteContact} />\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}