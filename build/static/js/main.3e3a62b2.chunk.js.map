{"version":3,"sources":["components/ContactsForm/ContactsForm.js","components/ContactsList/ContactsListItem.js","components/ContactsList/ContactsList.js","components/Container/Container.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContactsForm","initialState","name","number","state","nameInputId","uuid","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","contact","id","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","Component","PropsType","func","isRequired","ContactItem","onDeleteContact","onClick","prototype","PropTypes","string","ContactsList","findContact","map","Container","children","Filter","App","contacts","filter","hasContacts","some","toLocaleLowerCase","addContact","alert","normalizedFilter","length","toLowerCase","includes","changeFilter","e","deleteContact","contactId","prevState","localProduct","localStorage","getItem","parseProduct","JSON","parse","prevProps","setItem","stringify","visibleContact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e3a62b2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropsType from \"prop-types\";\nimport { v4 as uuid } from \"uuid\";\n\nclass ContactsForm extends Component {\n  initialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  nameInputId = uuid();\n  numberInputId = uuid();\n\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const contact = {\n      id: uuid(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n\n    this.props.onSubmit(contact);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState(this.initialState);\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </label>\n        <label htmlFor={this.numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handleChange}\n            id={this.numberInputId}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactsForm.PropsType = {\n  onSubmit: PropsType.func.isRequired,\n};\n\nexport default ContactsForm;\n","import PropTypes from \"prop-types\";\n\nconst ContactItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <li>\n      {name}: {number}\n      <button type=\"submit\" onClick={() => onDeleteContact(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.prototype = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from \"./ContactsListItem.js\";\nimport PropTypes from \"prop-types\";\n\nconst ContactsList = ({ findContact, onDeleteContact }) => {\n  return (\n    <ul>\n      {findContact.map(({ id, name, number }) => {\n        return (\n          <ContactItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={onDeleteContact}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.prototype = {\n  findContact: PropTypes.func.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","const Container = ({ children }) => <div>{children}</div>;\n\nexport default Container;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from \"react\";\nimport ContactsForm from \"./components/ContactsForm\";\nimport ContactsList from \"./components/ContactsList\";\nimport Container from \"./components/Container\";\nimport Filter from \"./components/Filter/Filter\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\ncomponentDidMount(){\n  const localProduct = localStorage.getItem('products');\n  const parseProduct = JSON.parse(localProduct);\n  if(parseProduct){\n    this.setState({contacts: parseProduct})\n  }\n};\n\ncomponentDidUpdate(prevProps, prevState){\n\n  if(prevState.contacts !== this.state.contacts)\n  localStorage.setItem('products', JSON.stringify(this.state.contacts))\n}\n\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  // contact.name  имя обьекта === name из инпута\n  hasContacts = (name) => {\n    return this.state.contacts.some((contact) => {\n      return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase();\n    });\n  };\n\n  // вызываем hasContact где найденое имя массива совпадает\n  // с именем введенным в инпут то if (false) не выполнится будет алерт\n\n  addContact = (contact) => {\n    if (!this.hasContacts(contact.name)) {\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    } else {\n      alert(`${contact.name} is already in contacts`);\n    }\n  };\n\n  findContact = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLocaleLowerCase();\n    if (filter.length) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter),\n      );\n    } else {\n      return contacts;\n    }\n  };\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  render() {\n    const visibleContact = this.findContact();\n    return (\n      <Container>\n        <h1> PhoneBook </h1>\n        <ContactsForm onSubmit={this.addContact} />\n\n        <div>\n          <h2> Contacts </h2>\n          <Filter value={this.state.filter} onChange={this.changeFilter} />\n          <ContactsList\n            findContact={visibleContact}\n            onDeleteContact={this.deleteContact}\n          />\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}